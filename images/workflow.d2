# Zone Level Semantic Model
# 
# Need to Update so that the parts of creating the device semantic model are grouped in with the other semantic modeling
# Device semantic model will have an arrow coming from the Device Configuration Process. 
zls: "Semantic Model" {
    'style': {}
}
zls.bi: "Building Information" {
    'style': {}
    'ex': |
        Add in building information. Information required may be  
        application specific.

        Information required:
         - Name 
         - URI
         - (Optional) Information about campus, location, or other  
         building characteristics
    |
}
zls.ri: " (Optional) Floor Plan Information" {
    'style': {}
    'ex': |
        Add in information about the rooms, floors, etc.

        Information required:
         - Name 
         - URI
         - Space Type
         - (Optional) Relationships between spaces
    |
}

zls.zi: "Zone Information" {
    'style': {}
    'ex': |
        create a zone level semantic model. This may be as simple  
        as a list of zones with their names, if there is no interest in  
        modeling the relationships between zones or physical spaces  

        Information required:
         - Name 
         - URI
         - (Optional) Relationship to other zones and floor plan
    |
}

zls.ei: "Equipment Information" {
    'style': {}
    'ex': |
        create a semantic model of the equipment.  
        This semantic model can be used to automatically configure  
        the Platform Driver and devices.  
        This process is guided through user interface.
          

        Information required:
         - Name 
         - URI
         - Relationships to fed Zone or containing Equipment
    |
}

# Device Config Process.ce: "Contained Equipment" {
#     'style':{}
#     'ex': |
#         Create sub-level equipment (eg:Fans, Heating/Cooling Coils)

#         Information required:
#          - Relationship and URI 
#          - Name
#          - URI
#          - Device Config File
#          - Point list (csv file)
#         |
# }

# Device Config Process.ce2: "Contained Equipment" {
#     'style':{}
#     'ex': |
#         Create sub-level equipment (eg:Fans, Heating/Cooling Coils)

#         Information required:
#          - Relationship and URI 
#          - Name
#          - URI
#          - Device Config File
#          - Point list (csv file)
#         |
# }

zls.bi -> zls.zi 
zls.bi -> zls.ri 
zls.ri <- zls.zi
zls.ei -> zls.zi

vcp: "VOLTTRON Configuration Process"

vcp.vec: "VOLTTRON Equipment Configuration Files" {
    'style': {}
    'ex': |
    create VOLTTRON configuration files for Platform Driver.  
    Each configuration file is linked by URI to the device instance  
    in the semantic model
      
    Information required:
     - Equipment Point List 
     - URI
     - Platform Driver Configuration
    | 
}

vcp.pdi: "Platform Driver Instantiation" {
    'style':{}
    'ex': |
        Each device driver is configured and instantiated.  
        If a Historian has been set up, monitoring will begin
        |
}

vcp.ac: "Application Configuration" {
    'style':{}
    'ex': |
        Applications written for brick models can easily be  
        translated to run on data collected by the platform.  
        Control applications come with config-generation file  
        to create generate a config file for a volttron agent  
        semi-automatically
        |
}

vcp.vec -> vcp.pdi -> vcp.ac
vcp.vec -> zls.ei -> vcp.pdi

# vcp.dlist -> zls.zi
# vcp.ce -> zls.zi
# vcp.ce2 -> zls.zi

#vcp -> zls.zi